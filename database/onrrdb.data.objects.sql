--
-- PostgreSQL database dump
--

-- Dumped from database version 11.5
-- Dumped by pg_dump version 12.1 (Ubuntu 12.1-1.pgdg18.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

DROP DATABASE cgawsbrokerprod8py3w7sukk91mnq;
--
-- Name: cgawsbrokerprod8py3w7sukk91mnq; Type: DATABASE; Schema: -; Owner: ucn1rju0du1ngaip
--

CREATE DATABASE cgawsbrokerprod8py3w7sukk91mnq WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8';


ALTER DATABASE cgawsbrokerprod8py3w7sukk91mnq OWNER TO ucn1rju0du1ngaip;

\connect cgawsbrokerprod8py3w7sukk91mnq

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;



--
-- Name: commodity; Type: TABLE; Schema: public; Owner: ucn1rju0du1ngaip
--

CREATE TABLE public.commodity (
    commodity_id integer NOT NULL,
    product character varying(255),
    commodity character varying(255),
    revenue_type character varying(255),
    revenue_category character varying(255),
    mineral_lease_type character varying(255),
    disbursement_type character varying(255),
    fund_type character varying(255),
    disbursement_category character varying(255),
    source character varying(255)
);


ALTER TABLE public.commodity OWNER TO ucn1rju0du1ngaip;

--
-- Name: commodity_commodity_id_seq; Type: SEQUENCE; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE public.commodity ALTER COLUMN commodity_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.commodity_commodity_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: disbursement; Type: TABLE; Schema: public; Owner: ucn1rju0du1ngaip
--

CREATE TABLE public.disbursement (
    location_id integer NOT NULL,
    period_id integer NOT NULL,
    commodity_id integer NOT NULL,
    disbursement real,
    raw_disbursement character varying(255),
    duplicate_no integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.disbursement OWNER TO ucn1rju0du1ngaip;

--
-- Name: location; Type: TABLE; Schema: public; Owner: ucn1rju0du1ngaip
--

CREATE TABLE public.location (
    location_id integer NOT NULL,
    fips_code character varying(5),
    state character varying(255),
    county character varying(255),
    land_class character varying(255),
    land_category character varying(255),
    offshore_region character varying(255),
    offshore_planning_area character varying(255),
    offshore_planning_area_code character varying(3),
    offshore_block character varying(255),
    offshore_protraction character varying(255)
);


ALTER TABLE public.location OWNER TO ucn1rju0du1ngaip;

--
-- Name: period; Type: TABLE; Schema: public; Owner: ucn1rju0du1ngaip
--

CREATE TABLE public.period (
    period_id integer NOT NULL,
    period character varying(255),
    calendar_year integer,
    fiscal_year integer,
    month integer,
    month_long character varying(255),
    fiscal_month integer,
    period_date date
);


ALTER TABLE public.period OWNER TO ucn1rju0du1ngaip;

--
-- Name: revenue; Type: TABLE; Schema: public; Owner: ucn1rju0du1ngaip
--

CREATE TABLE public.revenue (
    location_id integer NOT NULL,
    period_id integer NOT NULL,
    commodity_id integer NOT NULL,
    revenue real,
    raw_revenue character varying(255),
    duplicate_no integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.revenue OWNER TO ucn1rju0du1ngaip;

--
-- Name: fiscal_revenue_summary; Type: VIEW; Schema: public; Owner: ucn1rju0du1ngaip
--

CREATE VIEW public.fiscal_revenue_summary AS
 SELECT a.location_type,
    a.land_category,
    a.fiscal_year,
    a.state_or_area,
    a.sum,
    a.distinct_commodities
   FROM (( SELECT 'State'::text AS location_type,
            location.land_category,
            period.fiscal_year,
                CASE
                    WHEN ((location.land_category)::text = 'Offshore'::text) THEN location.offshore_planning_area_code
                    ELSE location.state
                END AS state_or_area,
            sum(revenue.revenue) AS sum,
            count(DISTINCT commodity.commodity) AS distinct_commodities
           FROM (((public.revenue
             JOIN public.period USING (period_id))
             JOIN public.location USING (location_id))
             JOIN public.commodity USING (commodity_id))
          WHERE ((period.period)::text = 'Fiscal Year'::text)
          GROUP BY
                CASE
                    WHEN ((location.land_category)::text = 'Offshore'::text) THEN location.offshore_planning_area_code
                    ELSE location.state
                END, location.land_category, period.fiscal_year
          ORDER BY period.fiscal_year,
                CASE
                    WHEN ((location.land_category)::text = 'Offshore'::text) THEN location.offshore_planning_area_code
                    ELSE location.state
                END)
        UNION
        ( SELECT 'National'::text AS location_type,
            'National'::character varying AS land_category,
            period.fiscal_year,
            'National'::text AS state_or_area,
            sum(revenue.revenue) AS sum,
            count(DISTINCT commodity.commodity) AS distinct_commodities
           FROM (((public.revenue
             JOIN public.period USING (period_id))
             JOIN public.location USING (location_id))
             JOIN public.commodity USING (commodity_id))
          WHERE ((period.period)::text = 'Fiscal Year'::text)
          GROUP BY 'National'::text, period.fiscal_year
          ORDER BY period.fiscal_year, 'National'::text)
        UNION
        ( SELECT 'County'::text AS location_type,
            location.land_category,
            period.fiscal_year,
            location.fips_code AS state_or_area,
            sum(revenue.revenue) AS sum,
            count(DISTINCT commodity.commodity) AS distinct_commodities
           FROM (((public.revenue
             JOIN public.period USING (period_id))
             JOIN public.location USING (location_id))
             JOIN public.commodity USING (commodity_id))
          WHERE ((period.period)::text = 'Fiscal Year'::text)
          GROUP BY location.fips_code, location.land_category, period.fiscal_year
          ORDER BY period.fiscal_year, location.fips_code)) a
  ORDER BY a.fiscal_year, a.state_or_area;


ALTER TABLE public.fiscal_revenue_summary OWNER TO ucn1rju0du1ngaip;

--
-- Name: location_location_id_seq; Type: SEQUENCE; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE public.location ALTER COLUMN location_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.location_location_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: period_period_id_seq; Type: SEQUENCE; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE public.period ALTER COLUMN period_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.period_period_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: production; Type: TABLE; Schema: public; Owner: ucn1rju0du1ngaip
--

CREATE TABLE public.production (
    location_id integer NOT NULL,
    period_id integer NOT NULL,
    commodity_id integer NOT NULL,
    volume real,
    raw_volume character varying(255),
    duplicate_no integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.production OWNER TO ucn1rju0du1ngaip;

--
-- Name: revenue_commodity_summary; Type: VIEW; Schema: public; Owner: ucn1rju0du1ngaip
--

CREATE VIEW public.revenue_commodity_summary AS
( SELECT
        CASE
            WHEN ((location.land_category)::text = 'Offshore'::text) THEN location.offshore_planning_area_code
            ELSE location.state
        END AS state_or_area,
    period.fiscal_year,
    commodity.commodity,
    sum(revenue.revenue) AS total
   FROM (((public.revenue
     JOIN public.location USING (location_id))
     JOIN public.period USING (period_id))
     JOIN public.commodity USING (commodity_id))
  WHERE ((period.period)::text = 'Fiscal Year'::text)
  GROUP BY
        CASE
            WHEN ((location.land_category)::text = 'Offshore'::text) THEN location.offshore_planning_area_code
            ELSE location.state
        END, period.fiscal_year, commodity.commodity
  ORDER BY period.fiscal_year,
        CASE
            WHEN ((location.land_category)::text = 'Offshore'::text) THEN location.offshore_planning_area_code
            ELSE location.state
        END, (sum(revenue.revenue)) DESC)
UNION
( SELECT 'National'::text AS state_or_area,
    period.fiscal_year,
    commodity.commodity,
    sum(revenue.revenue) AS total
   FROM (((public.revenue
     JOIN public.location USING (location_id))
     JOIN public.period USING (period_id))
     JOIN public.commodity USING (commodity_id))
  WHERE ((period.period)::text = 'Fiscal Year'::text)
  GROUP BY 'National'::text, period.fiscal_year, commodity.commodity
  ORDER BY period.fiscal_year, 'National'::text, (sum(revenue.revenue)) DESC);


ALTER TABLE public.revenue_commodity_summary OWNER TO ucn1rju0du1ngaip;

--
-- Name: revenue_trends; Type: VIEW; Schema: public; Owner: ucn1rju0du1ngaip
--

CREATE VIEW public.revenue_trends AS
 SELECT period.fiscal_year,
        CASE
            WHEN (((commodity.revenue_type)::text = 'Other Revenues'::text) OR ((commodity.revenue_type)::text = 'Civil Penalties'::text) OR ((commodity.revenue_type)::text = 'Inspection Fees'::text)) THEN 'Other Revenues'::character varying
            ELSE commodity.revenue_type
        END AS trend_type,
    ( SELECT period_1.month_long
           FROM public.period period_1
          WHERE (period_1.period_date = ( SELECT max(period_2.period_date) AS max
                   FROM public.period period_2
                  WHERE (period_2.period_date <= '2019-07-01'::date)))) AS current_month,
    sum(
        CASE
            WHEN (period.fiscal_month <= ( SELECT period_1.fiscal_month
               FROM public.period period_1
              WHERE (period_1.period_date = ( SELECT max(period_2.period_date) AS max
                       FROM public.period period_2
                      WHERE (period_2.period_date <= '2019-07-01'::date))))) THEN revenue.revenue
            ELSE (0)::real
        END) AS total_ytd,
    sum(revenue.revenue) AS total
   FROM ((public.revenue
     JOIN public.period USING (period_id))
     JOIN public.commodity USING (commodity_id))
  WHERE ((commodity.commodity IS NOT NULL) AND (period.period_date <= '2019-07-01'::date) AND ((period.period)::text = 'Monthly'::text))
  GROUP BY period.fiscal_year,
        CASE
            WHEN (((commodity.revenue_type)::text = 'Other Revenues'::text) OR ((commodity.revenue_type)::text = 'Civil Penalties'::text) OR ((commodity.revenue_type)::text = 'Inspection Fees'::text)) THEN 'Other Revenues'::character varying
            ELSE commodity.revenue_type
        END
UNION
 SELECT period.fiscal_year,
    'All Revenue'::character varying AS trend_type,
    ( SELECT period_1.month_long
           FROM public.period period_1
          WHERE (period_1.period_date = ( SELECT max(period_2.period_date) AS max
                   FROM public.period period_2
                  WHERE (period_2.period_date <= '2019-07-01'::date)))) AS current_month,
    sum(
        CASE
            WHEN (period.fiscal_month <= ( SELECT period_1.fiscal_month
               FROM public.period period_1
              WHERE (period_1.period_date = ( SELECT max(period_2.period_date) AS max
                       FROM public.period period_2
                      WHERE (period_2.period_date <= '2019-07-01'::date))))) THEN revenue.revenue
            ELSE (0)::real
        END) AS total_ytd,
    sum(revenue.revenue) AS total
   FROM ((public.revenue
     JOIN public.period USING (period_id))
     JOIN public.commodity USING (commodity_id))
  WHERE ((commodity.commodity IS NOT NULL) AND (period.period_date <= '2019-07-01'::date) AND ((period.period)::text = 'Monthly'::text))
  GROUP BY period.fiscal_year;


ALTER TABLE public.revenue_trends OWNER TO ucn1rju0du1ngaip;

--
-- Name: total_yearly_revenue; Type: VIEW; Schema: public; Owner: ucn1rju0du1ngaip
--

CREATE VIEW public.total_yearly_revenue AS
 SELECT period.period,
    period.fiscal_year,
    sum(
        CASE
            WHEN ((location.land_class)::text = 'Native American'::text) THEN revenue.revenue
            ELSE (0)::real
        END) AS native_american,
    sum(
        CASE
            WHEN ((location.land_category)::text = 'Not Tied to a Lease'::text) THEN revenue.revenue
            ELSE (0)::real
        END) AS not_tied_to_a_lease,
    sum(
        CASE
            WHEN (((location.land_class)::text = 'Federal'::text) AND ((location.land_category)::text = 'Onshore'::text)) THEN revenue.revenue
            ELSE (0)::real
        END) AS federal_onshore,
    sum(
        CASE
            WHEN (((location.land_class)::text = 'Federal'::text) AND ((location.land_category)::text = 'Offshore'::text)) THEN revenue.revenue
            ELSE (0)::real
        END) AS federal_offshore
   FROM ((public.revenue
     JOIN public.period USING (period_id))
     JOIN public.location USING (location_id))
  WHERE ((period.period)::text = 'Fiscal Year'::text)
  GROUP BY period.period, period.fiscal_year
  ORDER BY period.period, period.fiscal_year;


ALTER TABLE public.total_yearly_revenue OWNER TO ucn1rju0du1ngaip;

--
-- Name: commodity commodity_pkey; Type: CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.commodity
    ADD CONSTRAINT commodity_pkey PRIMARY KEY (commodity_id);


--
-- Name: commodity commodity_product_commodity_revenue_type_revenue_category_m_key; Type: CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.commodity
    ADD CONSTRAINT commodity_product_commodity_revenue_type_revenue_category_m_key UNIQUE (product, commodity, revenue_type, revenue_category, mineral_lease_type, disbursement_type, fund_type, disbursement_category);


--
-- Name: disbursement disbursement_pkey; Type: CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.disbursement
    ADD CONSTRAINT disbursement_pkey PRIMARY KEY (location_id, period_id, commodity_id, duplicate_no);


--
-- Name: location location_fips_code_state_county_land_class_land_category_of_key; Type: CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.location
    ADD CONSTRAINT location_fips_code_state_county_land_class_land_category_of_key UNIQUE (fips_code, state, county, land_class, land_category, offshore_region, offshore_planning_area, offshore_planning_area_code, offshore_block, offshore_protraction);


--
-- Name: location location_pkey; Type: CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.location
    ADD CONSTRAINT location_pkey PRIMARY KEY (location_id);


--
-- Name: period period_period_calendar_year_fiscal_year_month_month_long_fi_key; Type: CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.period
    ADD CONSTRAINT period_period_calendar_year_fiscal_year_month_month_long_fi_key UNIQUE (period, calendar_year, fiscal_year, month, month_long, fiscal_month, period_date);


--
-- Name: period period_pkey; Type: CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.period
    ADD CONSTRAINT period_pkey PRIMARY KEY (period_id);


--
-- Name: production production_pkey; Type: CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.production
    ADD CONSTRAINT production_pkey PRIMARY KEY (location_id, period_id, commodity_id, duplicate_no);


--
-- Name: revenue revenue_pkey; Type: CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.revenue
    ADD CONSTRAINT revenue_pkey PRIMARY KEY (location_id, period_id, commodity_id, duplicate_no);


--
-- Name: disbursement disbursement_commodity_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.disbursement
    ADD CONSTRAINT disbursement_commodity_id_fkey FOREIGN KEY (commodity_id) REFERENCES public.commodity(commodity_id);


--
-- Name: disbursement disbursement_location_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.disbursement
    ADD CONSTRAINT disbursement_location_id_fkey FOREIGN KEY (location_id) REFERENCES public.location(location_id);


--
-- Name: disbursement disbursement_period_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.disbursement
    ADD CONSTRAINT disbursement_period_id_fkey FOREIGN KEY (period_id) REFERENCES public.period(period_id);


--
-- Name: production production_commodity_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.production
    ADD CONSTRAINT production_commodity_id_fkey FOREIGN KEY (commodity_id) REFERENCES public.commodity(commodity_id);


--
-- Name: production production_location_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.production
    ADD CONSTRAINT production_location_id_fkey FOREIGN KEY (location_id) REFERENCES public.location(location_id);


--
-- Name: production production_period_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.production
    ADD CONSTRAINT production_period_id_fkey FOREIGN KEY (period_id) REFERENCES public.period(period_id);


--
-- Name: revenue revenue_commodity_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.revenue
    ADD CONSTRAINT revenue_commodity_id_fkey FOREIGN KEY (commodity_id) REFERENCES public.commodity(commodity_id);


--
-- Name: revenue revenue_location_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.revenue
    ADD CONSTRAINT revenue_location_id_fkey FOREIGN KEY (location_id) REFERENCES public.location(location_id);


--
-- Name: revenue revenue_period_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ucn1rju0du1ngaip
--

ALTER TABLE ONLY public.revenue
    ADD CONSTRAINT revenue_period_id_fkey FOREIGN KEY (period_id) REFERENCES public.period(period_id);


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: ucn1rju0du1ngaip
--

REVOKE ALL ON SCHEMA public FROM rdsadmin;
REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO ucn1rju0du1ngaip;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

